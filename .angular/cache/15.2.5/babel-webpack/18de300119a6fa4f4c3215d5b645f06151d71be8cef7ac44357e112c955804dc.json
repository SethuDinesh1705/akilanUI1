{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { Directive, ElementRef, Inject, Input, NgZone, Optional, Renderer2, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/**\n * \\@docs-private\n */\nclass MatBadgeBase {}\n/** @type {?} */\nconst _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/**\n * Directive to display a text badge.\n */\nclass MatBadge extends _MatBadgeMixinBase {\n  /**\n   * @param {?} _document\n   * @param {?} _ngZone\n   * @param {?} _elementRef\n   * @param {?} _ariaDescriber\n   * @param {?=} _renderer\n   */\n  constructor(_document, _ngZone, _elementRef, _ariaDescriber, _renderer) {\n    super();\n    this._document = _document;\n    this._ngZone = _ngZone;\n    this._elementRef = _elementRef;\n    this._ariaDescriber = _ariaDescriber;\n    this._renderer = _renderer;\n    /**\n     * Whether the badge has any content.\n     */\n    this._hasContent = false;\n    this._color = 'primary';\n    this._overlap = true;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    this.position = 'above after';\n    /**\n     * Size of the badge. Can be 'small', 'medium', or 'large'.\n     */\n    this.size = 'medium';\n    /**\n     * Unique id for the badge\n     */\n    this._id = nextId++;\n  }\n  /**\n   * The color of the badge. Can be `primary`, `accent`, or `warn`.\n   * @return {?}\n   */\n  get color() {\n    return this._color;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set color(value) {\n    this._setColor(value);\n    this._color = value;\n  }\n  /**\n   * Whether the badge should overlap its contents or not\n   * @return {?}\n   */\n  get overlap() {\n    return this._overlap;\n  }\n  /**\n   * @param {?} val\n   * @return {?}\n   */\n  set overlap(val) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  /**\n   * The content for the badge\n   * @return {?}\n   */\n  get content() {\n    return this._content;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set content(value) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  /**\n   * Message used to describe the decorated element via aria-describedby\n   * @return {?}\n   */\n  get description() {\n    return this._description;\n  }\n  /**\n   * @param {?} newDescription\n   * @return {?}\n   */\n  set description(newDescription) {\n    if (newDescription !== this._description) {\n      /** @type {?} */\n      const badgeElement = this._badgeElement;\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n      if (badgeElement) {\n        newDescription ? badgeElement.setAttribute('aria-label', newDescription) : badgeElement.removeAttribute('aria-label');\n      }\n    }\n  }\n  /**\n   * Whether the badge is hidden.\n   * @return {?}\n   */\n  get hidden() {\n    return this._hidden;\n  }\n  /**\n   * @param {?} val\n   * @return {?}\n   */\n  set hidden(val) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  /**\n   * Whether the badge is above the host or not\n   * @return {?}\n   */\n  isAbove() {\n    return this.position.indexOf('below') === -1;\n  }\n  /**\n   * Whether the badge is after the host or not\n   * @return {?}\n   */\n  isAfter() {\n    return this.position.indexOf('before') === -1;\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    /** @type {?} */\n    const badgeElement = this._badgeElement;\n    if (badgeElement) {\n      if (this.description) {\n        this._ariaDescriber.removeDescription(badgeElement, this.description);\n      }\n      // When creating a badge through the Renderer, Angular will keep it in an index.\n      // We have to destroy it ourselves, otherwise it'll be retained in memory.\n      // @breaking-change 8.0.0 remove _renderer from null.\n      if (this._renderer && this._renderer.destroyNode) {\n        this._renderer.destroyNode(badgeElement);\n      }\n    }\n  }\n  /**\n   * Injects a span element into the DOM with the content.\n   * @private\n   * @return {?}\n   */\n  _updateTextContent() {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n  /**\n   * Creates the badge element\n   * @private\n   * @return {?}\n   */\n  _createBadgeElement() {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    /** @type {?} */\n    const rootNode = this._renderer || this._document;\n    /** @type {?} */\n    const badgeElement = rootNode.createElement('span');\n    /** @type {?} */\n    const activeClass = 'mat-badge-active';\n    /** @type {?} */\n    const contentClass = 'mat-badge-content';\n    // Clear any existing badges which may have persisted from a server-side render.\n    this._clearExistingBadges(contentClass);\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add(contentClass);\n    badgeElement.textContent = this.content;\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n    this._elementRef.nativeElement.appendChild(badgeElement);\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n    return badgeElement;\n  }\n  /**\n   * Sets the aria-label property on the element\n   * @private\n   * @param {?} newDescription\n   * @param {?} oldDescription\n   * @return {?}\n   */\n  _updateHostAriaDescription(newDescription, oldDescription) {\n    // ensure content available before setting label\n    /** @type {?} */\n    const content = this._updateTextContent();\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n  /**\n   * Adds css theme class given the color to the component host\n   * @private\n   * @param {?} colorPalette\n   * @return {?}\n   */\n  _setColor(colorPalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n  /**\n   * Clears any existing badges that might be left over from server-side rendering.\n   * @private\n   * @param {?} cssClass\n   * @return {?}\n   */\n  _clearExistingBadges(cssClass) {\n    /** @type {?} */\n    const element = this._elementRef.nativeElement;\n    /** @type {?} */\n    let childCount = element.children.length;\n    // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n    while (childCount--) {\n      /** @type {?} */\n      const currentChild = element.children[childCount];\n      if (currentChild.classList.contains(cssClass)) {\n        element.removeChild(currentChild);\n      }\n    }\n  }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) {\n  return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n};\nMatBadge.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatBadge,\n  selectors: [[\"\", \"matBadge\", \"\"]],\n  hostAttrs: [1, \"mat-badge\"],\n  hostVars: 20,\n  hostBindings: function MatBadge_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    }\n  },\n  inputs: {\n    disabled: [\"matBadgeDisabled\", \"disabled\"],\n    position: [\"matBadgePosition\", \"position\"],\n    size: [\"matBadgeSize\", \"size\"],\n    color: [\"matBadgeColor\", \"color\"],\n    overlap: [\"matBadgeOverlap\", \"overlap\"],\n    content: [\"matBadge\", \"content\"],\n    description: [\"matBadgeDescription\", \"description\"],\n    hidden: [\"matBadgeHidden\", \"hidden\"]\n  },\n  features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\nMatBadge.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Optional\n  }, {\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: NgZone\n}, {\n  type: ElementRef\n}, {\n  type: AriaDescriber\n}, {\n  type: Renderer2\n}];\nMatBadge.propDecorators = {\n  color: [{\n    type: Input,\n    args: ['matBadgeColor']\n  }],\n  overlap: [{\n    type: Input,\n    args: ['matBadgeOverlap']\n  }],\n  position: [{\n    type: Input,\n    args: ['matBadgePosition']\n  }],\n  content: [{\n    type: Input,\n    args: ['matBadge']\n  }],\n  description: [{\n    type: Input,\n    args: ['matBadgeDescription']\n  }],\n  size: [{\n    type: Input,\n    args: ['matBadgeSize']\n  }],\n  hidden: [{\n    type: Input,\n    args: ['matBadgeHidden']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n    type: Directive,\n    args: [{\n      selector: '[matBadge]',\n      inputs: ['disabled: matBadgeDisabled'],\n      host: {\n        'class': 'mat-badge',\n        '[class.mat-badge-overlap]': 'overlap',\n        '[class.mat-badge-above]': 'isAbove()',\n        '[class.mat-badge-below]': '!isAbove()',\n        '[class.mat-badge-before]': '!isAfter()',\n        '[class.mat-badge-after]': 'isAfter()',\n        '[class.mat-badge-small]': 'size === \"small\"',\n        '[class.mat-badge-medium]': 'size === \"medium\"',\n        '[class.mat-badge-large]': 'size === \"large\"',\n        '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n        '[class.mat-badge-disabled]': 'disabled'\n      }\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.AriaDescriber\n    }, {\n      type: ɵngcc0.Renderer2\n    }];\n  }, {\n    position: [{\n      type: Input,\n      args: ['matBadgePosition']\n    }],\n    size: [{\n      type: Input,\n      args: ['matBadgeSize']\n    }],\n    color: [{\n      type: Input,\n      args: ['matBadgeColor']\n    }],\n    overlap: [{\n      type: Input,\n      args: ['matBadgeOverlap']\n    }],\n    content: [{\n      type: Input,\n      args: ['matBadge']\n    }],\n    description: [{\n      type: Input,\n      args: ['matBadgeDescription']\n    }],\n    hidden: [{\n      type: Input,\n      args: ['matBadgeHidden']\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatBadgeModule {}\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) {\n  return new (t || MatBadgeModule)();\n};\nMatBadgeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatBadgeModule\n});\nMatBadgeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [A11yModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [A11yModule, MatCommonModule],\n      exports: [MatBadge],\n      declarations: [MatBadge]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, {\n    declarations: function () {\n      return [MatBadge];\n    },\n    imports: function () {\n      return [A11yModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatBadge];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatBadgeModule, MatBadgeBase, _MatBadgeMixinBase, MatBadge };","map":{"version":3,"names":["AriaDescriber","A11yModule","coerceBooleanProperty","DOCUMENT","Directive","ElementRef","Inject","Input","NgZone","Optional","Renderer2","NgModule","mixinDisabled","MatCommonModule","ɵngcc0","ɵngcc1","nextId","MatBadgeBase","_MatBadgeMixinBase","MatBadge","constructor","_document","_ngZone","_elementRef","_ariaDescriber","_renderer","_hasContent","_color","_overlap","position","size","_id","color","value","_setColor","overlap","val","content","_content","trim","length","_updateTextContent","description","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","setAttribute","removeAttribute","hidden","_hidden","isAbove","indexOf","isAfter","ngOnDestroy","removeDescription","destroyNode","_createBadgeElement","textContent","rootNode","createElement","activeClass","contentClass","_clearExistingBadges","classList","add","nativeElement","appendChild","requestAnimationFrame","runOutsideAngular","oldDescription","describe","colorPalette","remove","cssClass","element","childCount","children","currentChild","contains","removeChild","ɵfac","MatBadge_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","hostVars","hostBindings","MatBadge_HostBindings","rf","ctx","ɵɵclassProp","disabled","inputs","features","ɵɵInheritDefinitionFeature","ctorParameters","undefined","decorators","args","propDecorators","ngDevMode","ɵsetClassMetadata","selector","host","MatBadgeModule","MatBadgeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Users/Dineshkumar_Thangave/OneDrive - EPAM/Fun tasks/angulartaskone/node_modules/@angular/material/__ivy_ngcc__/esm2015/badge.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { Directive, ElementRef, Inject, Input, NgZone, Optional, Renderer2, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/**\n * \\@docs-private\n */\nclass MatBadgeBase {\n}\n/** @type {?} */\nconst _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/**\n * Directive to display a text badge.\n */\nclass MatBadge extends _MatBadgeMixinBase {\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _elementRef\n     * @param {?} _ariaDescriber\n     * @param {?=} _renderer\n     */\n    constructor(_document, _ngZone, _elementRef, _ariaDescriber, _renderer) {\n        super();\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        /**\n         * Whether the badge has any content.\n         */\n        this._hasContent = false;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /**\n         * Size of the badge. Can be 'small', 'medium', or 'large'.\n         */\n        this.size = 'medium';\n        /**\n         * Unique id for the badge\n         */\n        this._id = nextId++;\n    }\n    /**\n     * The color of the badge. Can be `primary`, `accent`, or `warn`.\n     * @return {?}\n     */\n    get color() { return this._color; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /**\n     * Whether the badge should overlap its contents or not\n     * @return {?}\n     */\n    get overlap() { return this._overlap; }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /**\n     * The content for the badge\n     * @return {?}\n     */\n    get content() { return this._content; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set content(value) {\n        this._content = value;\n        this._hasContent = value != null && `${value}`.trim().length > 0;\n        this._updateTextContent();\n    }\n    /**\n     * Message used to describe the decorated element via aria-describedby\n     * @return {?}\n     */\n    get description() { return this._description; }\n    /**\n     * @param {?} newDescription\n     * @return {?}\n     */\n    set description(newDescription) {\n        if (newDescription !== this._description) {\n            /** @type {?} */\n            const badgeElement = this._badgeElement;\n            this._updateHostAriaDescription(newDescription, this._description);\n            this._description = newDescription;\n            if (badgeElement) {\n                newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n                    badgeElement.removeAttribute('aria-label');\n            }\n        }\n    }\n    /**\n     * Whether the badge is hidden.\n     * @return {?}\n     */\n    get hidden() { return this._hidden; }\n    /**\n     * @param {?} val\n     * @return {?}\n     */\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /**\n     * Whether the badge is above the host or not\n     * @return {?}\n     */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /**\n     * Whether the badge is after the host or not\n     * @return {?}\n     */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const badgeElement = this._badgeElement;\n        if (badgeElement) {\n            if (this.description) {\n                this._ariaDescriber.removeDescription(badgeElement, this.description);\n            }\n            // When creating a badge through the Renderer, Angular will keep it in an index.\n            // We have to destroy it ourselves, otherwise it'll be retained in memory.\n            // @breaking-change 8.0.0 remove _renderer from null.\n            if (this._renderer && this._renderer.destroyNode) {\n                this._renderer.destroyNode(badgeElement);\n            }\n        }\n    }\n    /**\n     * Injects a span element into the DOM with the content.\n     * @private\n     * @return {?}\n     */\n    _updateTextContent() {\n        if (!this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        else {\n            this._badgeElement.textContent = this.content;\n        }\n        return this._badgeElement;\n    }\n    /**\n     * Creates the badge element\n     * @private\n     * @return {?}\n     */\n    _createBadgeElement() {\n        // @breaking-change 8.0.0 Remove null check for _renderer\n        /** @type {?} */\n        const rootNode = this._renderer || this._document;\n        /** @type {?} */\n        const badgeElement = rootNode.createElement('span');\n        /** @type {?} */\n        const activeClass = 'mat-badge-active';\n        /** @type {?} */\n        const contentClass = 'mat-badge-content';\n        // Clear any existing badges which may have persisted from a server-side render.\n        this._clearExistingBadges(contentClass);\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        badgeElement.classList.add(contentClass);\n        badgeElement.textContent = this.content;\n        if (this.description) {\n            badgeElement.setAttribute('aria-label', this.description);\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /**\n     * Sets the aria-label property on the element\n     * @private\n     * @param {?} newDescription\n     * @param {?} oldDescription\n     * @return {?}\n     */\n    _updateHostAriaDescription(newDescription, oldDescription) {\n        // ensure content available before setting label\n        /** @type {?} */\n        const content = this._updateTextContent();\n        if (oldDescription) {\n            this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n        if (newDescription) {\n            this._ariaDescriber.describe(content, newDescription);\n        }\n    }\n    /**\n     * Adds css theme class given the color to the component host\n     * @private\n     * @param {?} colorPalette\n     * @return {?}\n     */\n    _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n            if (this._color) {\n                this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n            }\n            if (colorPalette) {\n                this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n            }\n        }\n    }\n    /**\n     * Clears any existing badges that might be left over from server-side rendering.\n     * @private\n     * @param {?} cssClass\n     * @return {?}\n     */\n    _clearExistingBadges(cssClass) {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        let childCount = element.children.length;\n        // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n        while (childCount--) {\n            /** @type {?} */\n            const currentChild = element.children[childCount];\n            if (currentChild.classList.contains(cssClass)) {\n                element.removeChild(currentChild);\n            }\n        }\n    }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) { return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\nMatBadge.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatBadge, selectors: [[\"\", \"matBadge\", \"\"]], hostAttrs: [1, \"mat-badge\"], hostVars: 20, hostBindings: function MatBadge_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    } }, inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], position: [\"matBadgePosition\", \"position\"], size: [\"matBadgeSize\", \"size\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], hidden: [\"matBadgeHidden\", \"hidden\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatBadge.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ElementRef },\n    { type: AriaDescriber },\n    { type: Renderer2 }\n];\nMatBadge.propDecorators = {\n    color: [{ type: Input, args: ['matBadgeColor',] }],\n    overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n    position: [{ type: Input, args: ['matBadgePosition',] }],\n    content: [{ type: Input, args: ['matBadge',] }],\n    description: [{ type: Input, args: ['matBadgeDescription',] }],\n    size: [{ type: Input, args: ['matBadgeSize',] }],\n    hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n        type: Directive,\n        args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                    '[class.mat-badge-disabled]': 'disabled'\n                }\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber }, { type: ɵngcc0.Renderer2 }]; }, { position: [{\n            type: Input,\n            args: ['matBadgePosition']\n        }], size: [{\n            type: Input,\n            args: ['matBadgeSize']\n        }], color: [{\n            type: Input,\n            args: ['matBadgeColor']\n        }], overlap: [{\n            type: Input,\n            args: ['matBadgeOverlap']\n        }], content: [{\n            type: Input,\n            args: ['matBadge']\n        }], description: [{\n            type: Input,\n            args: ['matBadgeDescription']\n        }], hidden: [{\n            type: Input,\n            args: ['matBadgeHidden']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) { return new (t || MatBadgeModule)(); };\nMatBadgeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatBadgeModule });\nMatBadgeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [A11yModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge],\n                declarations: [MatBadge]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, { declarations: function () { return [MatBadge]; }, imports: function () { return [A11yModule,\n        MatCommonModule]; }, exports: function () { return [MatBadge]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatBadgeModule, MatBadgeBase, _MatBadgeMixinBase, MatBadge };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}