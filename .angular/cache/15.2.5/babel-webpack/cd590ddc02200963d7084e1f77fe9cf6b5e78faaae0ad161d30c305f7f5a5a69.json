{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, animateChild, query, state, style, transition, trigger } from '@angular/animations';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { A, DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, hasModifierKey } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { defer, merge, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * \\@docs-private\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/material/form-field';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/common';\nimport * as ɵngcc8 from '@angular/cdk/overlay';\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder || \"\\u00A0\");\n  }\n}\nfunction MatSelect_span_5_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue || \"\\u00A0\");\n  }\n}\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n  }\n}\nfunction MatSelect_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n  }\n}\nfunction MatSelect_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12)(1, \"div\", 13, 14);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r8._panelDoneAnimatingStream.next($event.toState));\n    })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r10._handleKeydown($event));\n    });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n  }\n}\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n  /**\n   * This animation ensures the select's overlay panel animation (transformPanel) is called when\n   * closing the select.\n   * This is needed due to https://github.com/angular/angular/issues/23302\n   */\n  transformPanelWrap: trigger('transformPanelWrap', [transition('* => void', query('@transformPanel', [animateChild()], {\n    optional: true\n  }))]),\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [state('void', style({\n    transform: 'scaleY(0.8)',\n    minWidth: '100%',\n    opacity: 0\n  })), state('showing', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 32px)',\n    // 32px = 2 * 16px padding\n    transform: 'scaleY(1)'\n  })), state('showing-multiple', style({\n    opacity: 1,\n    minWidth: 'calc(100% + 64px)',\n    // 64px = 48px padding on the left + 16px padding on the right\n    transform: 'scaleY(1)'\n  })), transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))]),\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * \\@breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [state('showing', style({\n    opacity: 1\n  })), transition('void => showing', [style({\n    opacity: 0\n  }), animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst transformPanel = matSelectAnimations.transformPanel;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst fadeInContent = matSelectAnimations.fadeInContent;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectDynamicMultipleError() {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectNonArrayValueError() {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nfunction getMatSelectNonFunctionValueError() {\n  return Error('`compareWith` must be a function.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n * @type {?}\n */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n * @type {?}\n */\nconst SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @type {?}\n */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @type {?}\n */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n * @type {?}\n */\nlet SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n * @type {?}\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n * @type {?}\n */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nclass MatSelectChange {\n  /**\n   * @param {?} source\n   * @param {?} value\n   */\n  constructor(source, value) {\n    this.source = source;\n    this.value = value;\n  }\n}\n// Boilerplate for applying mixins to MatSelect.\n/**\n * \\@docs-private\n */\nclass MatSelectBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} ngControl\n   */\n  constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n    this._elementRef = _elementRef;\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n}\n/** @type {?} */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) {\n  return new (t || MatSelectTrigger)();\n};\nMatSelectTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatSelectTrigger,\n  selectors: [[\"mat-select-trigger\"]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-select-trigger'\n    }]\n  }], null, null);\n})();\nclass MatSelect extends _MatSelectMixinBase {\n  /**\n   * @param {?} _viewportRuler\n   * @param {?} _changeDetectorRef\n   * @param {?} _ngZone\n   * @param {?} _defaultErrorStateMatcher\n   * @param {?} elementRef\n   * @param {?} _dir\n   * @param {?} _parentForm\n   * @param {?} _parentFormGroup\n   * @param {?} _parentFormField\n   * @param {?} ngControl\n   * @param {?} tabIndex\n   * @param {?} scrollStrategyFactory\n   * @param {?=} _liveAnnouncer\n   */\n  constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._viewportRuler = _viewportRuler;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._ngZone = _ngZone;\n    this._dir = _dir;\n    this._parentFormField = _parentFormField;\n    this.ngControl = ngControl;\n    this._liveAnnouncer = _liveAnnouncer;\n    /**\n     * Whether or not the overlay panel is open.\n     */\n    this._panelOpen = false;\n    /**\n     * Whether filling out the select is required in the form.\n     */\n    this._required = false;\n    /**\n     * The scroll position of the overlay panel, calculated to center the selected option.\n     */\n    this._scrollTop = 0;\n    /**\n     * Whether the component is in multiple selection mode.\n     */\n    this._multiple = false;\n    /**\n     * Comparison function to specify which option is displayed. Defaults to object equality.\n     */\n    this._compareWith = (o1, o2) => o1 === o2;\n    /**\n     * Unique id for this input.\n     */\n    this._uid = `mat-select-${nextUniqueId++}`;\n    /**\n     * Emits whenever the component is destroyed.\n     */\n    this._destroy = new Subject();\n    /**\n     * The cached font-size of the trigger element.\n     */\n    this._triggerFontSize = 0;\n    /**\n     * `View -> model callback called when value changes`\n     */\n    this._onChange = () => {};\n    /**\n     * `View -> model callback called when select has been touched`\n     */\n    this._onTouched = () => {};\n    /**\n     * The IDs of child options to be passed to the aria-owns attribute.\n     */\n    this._optionIds = '';\n    /**\n     * The value of the select panel's transform-origin property.\n     */\n    this._transformOrigin = 'top';\n    /**\n     * Emits when the panel element is finished transforming in.\n     */\n    this._panelDoneAnimatingStream = new Subject();\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    this._offsetY = 0;\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    this._positions = [{\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top'\n    }, {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom'\n    }];\n    /**\n     * Whether the component is disabling centering of the active option over the trigger.\n     */\n    this._disableOptionCentering = false;\n    this._focused = false;\n    /**\n     * A name for this control that can be used by `mat-form-field`.\n     */\n    this.controlType = 'mat-select';\n    /**\n     * Aria label of the select. If not specified, the placeholder will be used as label.\n     */\n    this.ariaLabel = '';\n    /**\n     * Combined stream of all of the child options' change events.\n     */\n    this.optionSelectionChanges = defer(() => {\n      if (this.options) {\n        return merge(...this.options.map(option => option.onSelectionChange));\n      }\n      return this._ngZone.onStable.asObservable().pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    });\n    /**\n     * Event emitted when the select panel has been toggled.\n     */\n    this.openedChange = new EventEmitter();\n    /**\n     * Event emitted when the select has been opened.\n     */\n    this._openedStream = this.openedChange.pipe(filter(o => o), map(() => {}));\n    /**\n     * Event emitted when the select has been closed.\n     */\n    this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => {}));\n    /**\n     * Event emitted when the selected value has been changed by the user.\n     */\n    this.selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * \\@docs-private\n     */\n    this.valueChange = new EventEmitter();\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n  /**\n   * Whether the select is focused.\n   * @return {?}\n   */\n  get focused() {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * \\@breaking-change 8.0.0\n   * @param {?} value\n   * @return {?}\n   */\n  set focused(value) {\n    this._focused = value;\n  }\n  /**\n   * Placeholder to be shown if no value has been selected.\n   * @return {?}\n   */\n  get placeholder() {\n    return this._placeholder;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /**\n   * Whether the component is required.\n   * @return {?}\n   */\n  get required() {\n    return this._required;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /**\n   * Whether the user should be allowed to select multiple options.\n   * @return {?}\n   */\n  get multiple() {\n    return this._multiple;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set multiple(value) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n    this._multiple = coerceBooleanProperty(value);\n  }\n  /**\n   * Whether to center the active option over the trigger.\n   * @return {?}\n   */\n  get disableOptionCentering() {\n    return this._disableOptionCentering;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set disableOptionCentering(value) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   * @return {?}\n   */\n  get compareWith() {\n    return this._compareWith;\n  }\n  /**\n   * @param {?} fn\n   * @return {?}\n   */\n  set compareWith(fn) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /**\n   * Value of the select control.\n   * @return {?}\n   */\n  get value() {\n    return this._value;\n  }\n  /**\n   * @param {?} newValue\n   * @return {?}\n   */\n  set value(newValue) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  /**\n   * Unique id of the element.\n   * @return {?}\n   */\n  get id() {\n    return this._id;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set id(value) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple);\n    this.stateChanges.next();\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream.pipe(distinctUntilChanged(), takeUntil(this._destroy)).subscribe(() => {\n      if (this.panelOpen) {\n        this._scrollTop = 0;\n        this.openedChange.emit(true);\n      } else {\n        this.openedChange.emit(false);\n        this.overlayDir.offsetX = 0;\n        this._changeDetectorRef.markForCheck();\n      }\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    this._initKeyManager();\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n  /**\n   * @return {?}\n   */\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n  /**\n   * @param {?} changes\n   * @return {?}\n   */\n  ngOnChanges(changes) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes['disabled']) {\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n  /**\n   * Toggles the overlay panel open or closed.\n   * @return {?}\n   */\n  toggle() {\n    this.panelOpen ? this.close() : this.open();\n  }\n  /**\n   * Opens the overlay panel.\n   * @return {?}\n   */\n  open() {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n  /**\n   * Closes the overlay panel and focuses the host element.\n   * @return {?}\n   */\n  close() {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param {?} value New value to be written to the model.\n   * @return {?}\n   */\n  writeValue(value) {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param {?} fn Callback to be triggered when the value changes.\n   * @return {?}\n   */\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param {?} fn Callback to be triggered when the component has been touched.\n   * @return {?}\n   */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param {?} isDisabled Sets whether the component is disabled.\n   * @return {?}\n   */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n  /**\n   * Whether or not the overlay panel is open.\n   * @return {?}\n   */\n  get panelOpen() {\n    return this._panelOpen;\n  }\n  /**\n   * The currently selected option.\n   * @return {?}\n   */\n  get selected() {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n  /**\n   * The value displayed in the trigger.\n   * @return {?}\n   */\n  get triggerValue() {\n    if (this.empty) {\n      return '';\n    }\n    if (this._multiple) {\n      /** @type {?} */\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n    return this._selectionModel.selected[0].viewValue;\n  }\n  /**\n   * Whether the element is in RTL mode.\n   * @return {?}\n   */\n  _isRtl() {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n  /**\n   * Handles all keydown events on the select.\n   * @param {?} event\n   * @return {?}\n   */\n  _handleKeydown(event) {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n  /**\n   * Handles keyboard events while the select is closed.\n   * @private\n   * @param {?} event\n   * @return {?}\n   */\n  _handleClosedKeydown(event) {\n    /** @type {?} */\n    const keyCode = event.keyCode;\n    /** @type {?} */\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    /** @type {?} */\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    /** @type {?} */\n    const manager = this._keyManager;\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey && !hasModifierKey(event) || (this.multiple || event.altKey) && isArrowKey) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      /** @type {?} */\n      const selectedOption = this.selected;\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n      // Since the value has changed, we need to announce it ourselves.\n      // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n      if (this._liveAnnouncer && selectedOption !== this.selected) {\n        this._liveAnnouncer.announce( /** @type {?} */this.selected.viewValue);\n      }\n    }\n  }\n  /**\n   * Handles keyboard events when the selected is open.\n   * @private\n   * @param {?} event\n   * @return {?}\n   */\n  _handleOpenKeydown(event) {\n    /** @type {?} */\n    const keyCode = event.keyCode;\n    /** @type {?} */\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    /** @type {?} */\n    const manager = this._keyManager;\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem && !hasModifierKey(event)) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      /** @type {?} */\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      /** @type {?} */\n      const previouslyFocusedIndex = manager.activeItemIndex;\n      manager.onKeydown(event);\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n  /**\n   * @return {?}\n   */\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   * @return {?}\n   */\n  _onBlur() {\n    this._focused = false;\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   * @return {?}\n   */\n  _onAttached() {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n  /**\n   * Returns the theme to be used on the panel.\n   * @return {?}\n   */\n  _getPanelTheme() {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /**\n   * Sets the pseudo checkbox padding size based on the width of the pseudo checkbox.\n   * @private\n   * @return {?}\n   */\n  _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      /** @type {?} */\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n  /**\n   * Whether the select has a value.\n   * @return {?}\n   */\n  get empty() {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n  /**\n   * @private\n   * @return {?}\n   */\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n      this.stateChanges.next();\n    });\n  }\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   * @private\n   * @param {?} value\n   * @return {?}\n   */\n  _setSelectionByValue(value) {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n      this._selectionModel.clear();\n      value.forEach(currentValue => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      /** @type {?} */\n      const correspondingOption = this._selectValue(value);\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Finds and selects and option based on its value.\n   * @private\n   * @param {?} value\n   * @return {?} Option that has the corresponding value.\n   */\n  _selectValue(value) {\n    /** @type {?} */\n    const correspondingOption = this.options.find(option => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value, value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n    return correspondingOption;\n  }\n  /**\n   * Sets up a key manager to listen to keyboard events on the overlay panel.\n   * @private\n   * @return {?}\n   */\n  _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead().withVerticalOrientation().withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr').withAllowedModifierKeys(['shiftKey']);\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n  /**\n   * Drops current option subscriptions and IDs and resets from scratch.\n   * @private\n   * @return {?}\n   */\n  _resetOptions() {\n    /** @type {?} */\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges)).pipe(takeUntil(changedOrDestroyed)).subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n    this._setOptionIds();\n  }\n  /**\n   * Invoked when an option is clicked.\n   * @private\n   * @param {?} option\n   * @param {?} isUserInput\n   * @return {?}\n   */\n  _onSelect(option, isUserInput) {\n    /** @type {?} */\n    const wasSelected = this._selectionModel.isSelected(option);\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n      if (this.multiple) {\n        this._sortValues();\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n    this.stateChanges.next();\n  }\n  /**\n   * Sorts the selected values in the selected based on their order in the panel.\n   * @private\n   * @return {?}\n   */\n  _sortValues() {\n    if (this.multiple) {\n      /** @type {?} */\n      const options = this.options.toArray();\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) : options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Emits change event to set the model value.\n   * @private\n   * @param {?=} fallbackValue\n   * @return {?}\n   */\n  _propagateChanges(fallbackValue) {\n    /** @type {?} */\n    let valueToEmit = null;\n    if (this.multiple) {\n      valueToEmit = /** @type {?} */this.selected.map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? /** @type {?} */this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n  /**\n   * Records option IDs to pass to the aria-owns property.\n   * @private\n   * @return {?}\n   */\n  _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   * @private\n   * @return {?}\n   */\n  _highlightCorrectOption() {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n  /**\n   * Scrolls the active option into view.\n   * @private\n   * @return {?}\n   */\n  _scrollActiveOptionIntoView() {\n    /** @type {?} */\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    /** @type {?} */\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n  }\n  /**\n   * Focuses the select element.\n   * @return {?}\n   */\n  focus() {\n    this._elementRef.nativeElement.focus();\n  }\n  /**\n   * Gets the index of the provided option in the option list.\n   * @private\n   * @param {?} option\n   * @return {?}\n   */\n  _getOptionIndex(option) {\n    return this.options.reduce((result, current, index) => {\n      return result === undefined ? option === current ? index : undefined : result;\n    }, undefined);\n  }\n  /**\n   * Calculates the scroll position and x- and y-offsets of the overlay panel.\n   * @private\n   * @return {?}\n   */\n  _calculateOverlayPosition() {\n    /** @type {?} */\n    const itemHeight = this._getItemHeight();\n    /** @type {?} */\n    const items = this._getItemCount();\n    /** @type {?} */\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    /** @type {?} */\n    const scrollContainerHeight = items * itemHeight;\n    // The farthest the panel can be scrolled before it hits the bottom\n    /** @type {?} */\n    const maxScroll = scrollContainerHeight - panelHeight;\n    // If no value is selected we open the popup to the first item.\n    /** @type {?} */\n    let selectedOptionOffset = this.empty ? 0 : /** @type {?} */this._getOptionIndex(this._selectionModel.selected[0]);\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    /** @type {?} */\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   * @param {?} selectedIndex\n   * @param {?} scrollBuffer\n   * @param {?} maxScroll\n   * @return {?}\n   */\n  _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n    /** @type {?} */\n    const itemHeight = this._getItemHeight();\n    /** @type {?} */\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    /** @type {?} */\n    const halfOptionHeight = itemHeight / 2;\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    /** @type {?} */\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n  /**\n   * Returns the aria-label of the select component.\n   * @return {?}\n   */\n  _getAriaLabel() {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n  /**\n   * Returns the aria-labelledby of the select component.\n   * @return {?}\n   */\n  _getAriaLabelledby() {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() || this._getAriaLabel()) {\n      return null;\n    }\n    return this._parentFormField._labelId || null;\n  }\n  /**\n   * Determines the `aria-activedescendant` to be set on the host.\n   * @return {?}\n   */\n  _getAriaActiveDescendant() {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n    return null;\n  }\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   * @private\n   * @return {?}\n   */\n  _calculateOverlayOffsetX() {\n    /** @type {?} */\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    /** @type {?} */\n    const viewportSize = this._viewportRuler.getViewportSize();\n    /** @type {?} */\n    const isRtl = this._isRtl();\n    /** @type {?} */\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X : SELECT_PANEL_PADDING_X * 2;\n    /** @type {?} */\n    let offsetX;\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      /** @type {?} */\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n    // Determine how much the select overflows on each side.\n    /** @type {?} */\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    /** @type {?} */\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth);\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   * @private\n   * @param {?} selectedIndex\n   * @param {?} scrollBuffer\n   * @param {?} maxScroll\n   * @return {?}\n   */\n  _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n    /** @type {?} */\n    const itemHeight = this._getItemHeight();\n    /** @type {?} */\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    /** @type {?} */\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    /** @type {?} */\n    let optionOffsetFromPanelTop;\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      /** @type {?} */\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      /** @type {?} */\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      /** @type {?} */\n      let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   * @private\n   * @param {?} maxScroll\n   * @return {?}\n   */\n  _checkOverlayWithinViewport(maxScroll) {\n    /** @type {?} */\n    const itemHeight = this._getItemHeight();\n    /** @type {?} */\n    const viewportSize = this._viewportRuler.getViewportSize();\n    /** @type {?} */\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    /** @type {?} */\n    const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n    /** @type {?} */\n    const panelHeightTop = Math.abs(this._offsetY);\n    /** @type {?} */\n    const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    /** @type {?} */\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n      this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n  /**\n   * Adjusts the overlay panel up to fit in the viewport.\n   * @private\n   * @param {?} panelHeightBottom\n   * @param {?} bottomSpaceAvailable\n   * @return {?}\n   */\n  _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    /** @type {?} */\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n  /**\n   * Adjusts the overlay panel down to fit in the viewport.\n   * @private\n   * @param {?} panelHeightTop\n   * @param {?} topSpaceAvailable\n   * @param {?} maxScroll\n   * @return {?}\n   */\n  _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    /** @type {?} */\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n  /**\n   * Sets the transform origin point based on the selected option.\n   * @private\n   * @return {?}\n   */\n  _getOriginBasedOnOption() {\n    /** @type {?} */\n    const itemHeight = this._getItemHeight();\n    /** @type {?} */\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    /** @type {?} */\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n  /**\n   * Calculates the amount of items in the select. This includes options and group labels.\n   * @private\n   * @return {?}\n   */\n  _getItemCount() {\n    return this.options.length + this.optionGroups.length;\n  }\n  /**\n   * Calculates the height of the select's options.\n   * @private\n   * @return {?}\n   */\n  _getItemHeight() {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @param {?} ids\n   * @return {?}\n   */\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * \\@docs-private\n   * @return {?}\n   */\n  get shouldLabelFloat() {\n    return this._panelOpen || !this.empty;\n  }\n}\nMatSelect.ɵfac = function MatSelect_Factory(t) {\n  return new (t || MatSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.MatFormField, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.LiveAnnouncer));\n};\nMatSelect.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatSelect,\n  selectors: [[\"mat-select\"]],\n  contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatSelectTrigger, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, 4);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    }\n  },\n  viewQuery: function MatSelect_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 5);\n      ɵngcc0.ɵɵviewQuery(_c1, 5);\n      ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"listbox\", 1, \"mat-select\"],\n  hostVars: 19,\n  hostBindings: function MatSelect_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatSelect_focus_HostBindingHandler() {\n        return ctx._onFocus();\n      })(\"blur\", function MatSelect_blur_HostBindingHandler() {\n        return ctx._onBlur();\n      });\n    }\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-label\", ctx._getAriaLabel())(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-owns\", ctx.panelOpen ? ctx._optionIds : null)(\"aria-multiselectable\", ctx.multiple)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n      ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    id: \"id\",\n    placeholder: \"placeholder\",\n    required: \"required\",\n    multiple: \"multiple\",\n    disableOptionCentering: \"disableOptionCentering\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    panelClass: \"panelClass\",\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    errorStateMatcher: \"errorStateMatcher\",\n    sortComparator: \"sortComparator\"\n  },\n  outputs: {\n    openedChange: \"openedChange\",\n    _openedStream: \"opened\",\n    _closedStream: \"closed\",\n    selectionChange: \"selectionChange\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matSelect\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatSelect\n  }, {\n    provide: MAT_OPTION_PARENT_COMPONENT,\n    useExisting: MatSelect\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c3,\n  decls: 9,\n  vars: 9,\n  consts: [[\"cdk-overlay-origin\", \"\", \"aria-hidden\", \"true\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-panel-wrap\"], [3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]],\n  template: function MatSelect_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c2);\n      ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n      ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() {\n        return ctx.toggle();\n      });\n      ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n      ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n      ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n      ɵngcc0.ɵɵelement(7, \"div\", 6);\n      ɵngcc0.ɵɵelementEnd()();\n      ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 10, \"ng-template\", 7);\n      ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() {\n        return ctx.close();\n      })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() {\n        return ctx._onAttached();\n      })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() {\n        return ctx.close();\n      });\n    }\n    if (rf & 2) {\n      const _r0 = ɵngcc0.ɵɵreference(1);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n      ɵngcc0.ɵɵadvance(3);\n      ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    }\n  },\n  dependencies: [ɵngcc7.NgClass, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc7.NgSwitchDefault, ɵngcc8.CdkConnectedOverlay, ɵngcc8.CdkOverlayOrigin],\n  styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"],\n  encapsulation: 2,\n  data: {\n    animation: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel]\n  },\n  changeDetection: 0\n});\n/** @nocollapse */\nMatSelect.ctorParameters = () => [{\n  type: ViewportRuler\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: NgZone\n}, {\n  type: ErrorStateMatcher\n}, {\n  type: ElementRef\n}, {\n  type: Directionality,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgForm,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: FormGroupDirective,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: MatFormField,\n  decorators: [{\n    type: Optional\n  }]\n}, {\n  type: NgControl,\n  decorators: [{\n    type: Self\n  }, {\n    type: Optional\n  }]\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [MAT_SELECT_SCROLL_STRATEGY]\n  }]\n}, {\n  type: LiveAnnouncer\n}];\nMatSelect.propDecorators = {\n  trigger: [{\n    type: ViewChild,\n    args: ['trigger']\n  }],\n  panel: [{\n    type: ViewChild,\n    args: ['panel']\n  }],\n  overlayDir: [{\n    type: ViewChild,\n    args: [CdkConnectedOverlay]\n  }],\n  options: [{\n    type: ContentChildren,\n    args: [MatOption, {\n      descendants: true\n    }]\n  }],\n  optionGroups: [{\n    type: ContentChildren,\n    args: [MatOptgroup]\n  }],\n  panelClass: [{\n    type: Input\n  }],\n  customTrigger: [{\n    type: ContentChild,\n    args: [MatSelectTrigger]\n  }],\n  placeholder: [{\n    type: Input\n  }],\n  required: [{\n    type: Input\n  }],\n  multiple: [{\n    type: Input\n  }],\n  disableOptionCentering: [{\n    type: Input\n  }],\n  compareWith: [{\n    type: Input\n  }],\n  value: [{\n    type: Input\n  }],\n  ariaLabel: [{\n    type: Input,\n    args: ['aria-label']\n  }],\n  ariaLabelledby: [{\n    type: Input,\n    args: ['aria-labelledby']\n  }],\n  errorStateMatcher: [{\n    type: Input\n  }],\n  sortComparator: [{\n    type: Input\n  }],\n  id: [{\n    type: Input\n  }],\n  openedChange: [{\n    type: Output\n  }],\n  _openedStream: [{\n    type: Output,\n    args: ['opened']\n  }],\n  _closedStream: [{\n    type: Output,\n    args: ['closed']\n  }],\n  selectionChange: [{\n    type: Output\n  }],\n  valueChange: [{\n    type: Output\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n    type: Component,\n    args: [{\n      selector: 'mat-select',\n      exportAs: 'matSelect',\n      template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\u00A0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><ng-content></ng-content></div></div></ng-template>\",\n      inputs: ['disabled', 'disableRipple', 'tabIndex'],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      host: {\n        'role': 'listbox',\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.aria-label]': '_getAriaLabel()',\n        '[attr.aria-labelledby]': '_getAriaLabelledby()',\n        '[attr.aria-required]': 'required.toString()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n        '[class.mat-select-disabled]': 'disabled',\n        '[class.mat-select-invalid]': 'errorState',\n        '[class.mat-select-required]': 'required',\n        '[class.mat-select-empty]': 'empty',\n        'class': 'mat-select',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()'\n      },\n      animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel],\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatSelect\n      }, {\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatSelect\n      }],\n      styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc1.ViewportRuler\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }, {\n      type: ɵngcc2.ErrorStateMatcher\n    }, {\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc3.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc5.MatFormField,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: ɵngcc4.NgControl,\n      decorators: [{\n        type: Self\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_SELECT_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: ɵngcc6.LiveAnnouncer\n    }];\n  }, {\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    openedChange: [{\n      type: Output\n    }],\n    _openedStream: [{\n      type: Output,\n      args: ['opened']\n    }],\n    _closedStream: [{\n      type: Output,\n      args: ['closed']\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    id: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    disableOptionCentering: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    trigger: [{\n      type: ViewChild,\n      args: ['trigger']\n    }],\n    panel: [{\n      type: ViewChild,\n      args: ['panel']\n    }],\n    overlayDir: [{\n      type: ViewChild,\n      args: [CdkConnectedOverlay]\n    }],\n    options: [{\n      type: ContentChildren,\n      args: [MatOption, {\n        descendants: true\n      }]\n    }],\n    optionGroups: [{\n      type: ContentChildren,\n      args: [MatOptgroup]\n    }],\n    panelClass: [{\n      type: Input\n    }],\n    customTrigger: [{\n      type: ContentChild,\n      args: [MatSelectTrigger]\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    sortComparator: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSelectModule {}\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) {\n  return new (t || MatSelectModule)();\n};\nMatSelectModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatSelectModule\n});\nMatSelectModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n  imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule, MatFormFieldModule, MatOptionModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n      exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n      declarations: [MatSelect, MatSelectTrigger],\n      providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, {\n    declarations: function () {\n      return [MatSelect, MatSelectTrigger];\n    },\n    imports: function () {\n      return [CommonModule, OverlayModule, MatOptionModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectBase, _MatSelectMixinBase, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent };","map":{"version":3,"names":["animate","animateChild","query","state","style","transition","trigger","ActiveDescendantKeyManager","LiveAnnouncer","Directionality","coerceBooleanProperty","SelectionModel","A","DOWN_ARROW","END","ENTER","HOME","LEFT_ARROW","RIGHT_ARROW","SPACE","UP_ARROW","hasModifierKey","CdkConnectedOverlay","Overlay","OverlayModule","ViewportRuler","Attribute","ChangeDetectionStrategy","ChangeDetectorRef","Component","ContentChild","ContentChildren","Directive","ElementRef","EventEmitter","Inject","InjectionToken","Input","isDevMode","NgZone","Optional","Output","Self","ViewChild","ViewEncapsulation","NgModule","FormGroupDirective","NgControl","NgForm","_countGroupLabelsBeforeOption","_getOptionScrollPosition","ErrorStateMatcher","MAT_OPTION_PARENT_COMPONENT","MatOptgroup","MatOption","mixinDisabled","mixinDisableRipple","mixinErrorState","mixinTabIndex","MatCommonModule","MatOptionModule","MatFormField","MatFormFieldControl","MatFormFieldModule","defer","merge","Subject","distinctUntilChanged","filter","map","startWith","switchMap","take","takeUntil","CommonModule","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","ɵngcc7","ɵngcc8","_c0","_c1","MatSelect_span_4_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r2","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","placeholder","MatSelect_span_5_span_1_Template","ctx_r5","triggerValue","MatSelect_span_5_ng_content_2_Template","ɵɵprojection","MatSelect_span_5_Template","ɵɵtemplate","ctx_r3","ɵɵproperty","customTrigger","MatSelect_ng_template_8_Template","_r9","ɵɵgetCurrentView","ɵɵlistener","MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener","$event","ɵɵrestoreView","ctx_r8","ɵɵresetView","_panelDoneAnimatingStream","next","toState","MatSelect_ng_template_8_Template_div_keydown_1_listener","ctx_r10","_handleKeydown","ctx_r4","undefined","ɵɵclassMapInterpolate1","_getPanelTheme","ɵɵstyleProp","_transformOrigin","_triggerFontSize","panelClass","multiple","_c2","_c3","matSelectAnimations","transformPanelWrap","optional","transformPanel","transform","minWidth","opacity","fadeInContent","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","SELECT_PANEL_PADDING_X","SELECT_PANEL_INDENT_PADDING_X","SELECT_ITEM_HEIGHT_EM","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_VIEWPORT_PADDING","MAT_SELECT_SCROLL_STRATEGY","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatSelectChange","constructor","source","value","MatSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","MatSelectTrigger","ɵfac","MatSelectTrigger_Factory","t","ɵdir","ɵɵdefineDirective","type","selectors","ngDevMode","ɵsetClassMetadata","args","selector","MatSelect","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_panelOpen","_required","_scrollTop","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_optionIds","_offsetY","_positions","originX","originY","overlayX","overlayY","_disableOptionCentering","_focused","controlType","ariaLabel","optionSelectionChanges","options","option","onSelectionChange","onStable","asObservable","pipe","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","valueAccessor","_scrollStrategyFactory","_scrollStrategy","parseInt","id","focused","_placeholder","stateChanges","required","_selectionModel","disableOptionCentering","compareWith","fn","_initializeSelection","_value","newValue","writeValue","_id","ngOnInit","subscribe","panelOpen","emit","overlayDir","offsetX","markForCheck","ngAfterContentInit","_initKeyManager","onChange","event","added","forEach","select","removed","deselect","changes","_resetOptions","ngDoCheck","updateErrorState","ngOnChanges","ngOnDestroy","complete","toggle","close","open","disabled","length","_triggerRect","nativeElement","getBoundingClientRect","getComputedStyle","fontSize","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayRef","overlayElement","_isRtl","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","altKey","preventDefault","selectedOption","setFirstItemActive","setLastItemActive","onKeydown","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_onFocus","_onBlur","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","color","pseudoCheckbox","querySelector","offsetWidth","isEmpty","Promise","resolve","then","Array","isArray","clear","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","console","warn","withTypeAhead","withVerticalOrientation","withAllowedModifierKeys","tabOut","focus","change","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","activeOptionIndex","labelCount","optionGroups","_getItemHeight","_getOptionIndex","reduce","result","current","index","itemHeight","items","_getItemCount","panelHeight","Math","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_calculateOverlayScroll","_calculateOverlayOffsetY","_checkOverlayWithinViewport","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","max","_getAriaLabel","ariaLabelledby","_getAriaLabelledby","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","shouldLabelFloat","MatSelect_Factory","ɵɵdirectiveInject","ɵɵinjectAttribute","ɵcmp","ɵɵdefineComponent","contentQueries","MatSelect_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","viewQuery","MatSelect_Query","ɵɵviewQuery","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","MatSelect_blur_HostBindingHandler","ɵɵattribute","toString","errorState","ɵɵclassProp","inputs","disableRipple","errorStateMatcher","outputs","exportAs","features","ɵɵProvidersFeature","useExisting","ɵɵInheritDefinitionFeature","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","ɵɵprojectionDef","MatSelect_Template_div_click_0_listener","ɵɵelement","MatSelect_Template_ng_template_backdropClick_8_listener","MatSelect_Template_ng_template_attach_8_listener","MatSelect_Template_ng_template_detach_8_listener","_r0","ɵɵreference","dependencies","NgClass","NgSwitch","NgSwitchCase","NgSwitchDefault","CdkOverlayOrigin","styles","encapsulation","data","animation","changeDetection","ctorParameters","decorators","String","propDecorators","descendants","None","OnPush","host","animations","providers","MatSelectModule","MatSelectModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Users/Dineshkumar_Thangave/OneDrive - EPAM/Fun tasks/angulartaskone/node_modules/@angular/material/__ivy_ngcc__/esm2015/select.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { animate, animateChild, query, state, style, transition, trigger } from '@angular/animations';\nimport { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { A, DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, hasModifierKey } from '@angular/cdk/keycodes';\nimport { CdkConnectedOverlay, Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Inject, InjectionToken, Input, isDevMode, NgZone, Optional, Output, Self, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, MAT_OPTION_PARENT_COMPONENT, MatOptgroup, MatOption, mixinDisabled, mixinDisableRipple, mixinErrorState, mixinTabIndex, MatCommonModule, MatOptionModule } from '@angular/material/core';\nimport { MatFormField, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { defer, merge, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, map, startWith, switchMap, take, takeUntil } from 'rxjs/operators';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * \\@docs-private\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/bidi';\nimport * as ɵngcc4 from '@angular/forms';\nimport * as ɵngcc5 from '@angular/material/form-field';\nimport * as ɵngcc6 from '@angular/cdk/a11y';\nimport * as ɵngcc7 from '@angular/common';\nimport * as ɵngcc8 from '@angular/cdk/overlay';\n\nconst _c0 = [\"trigger\"];\nconst _c1 = [\"panel\"];\nfunction MatSelect_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.placeholder || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_span_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.triggerValue || \"\\u00A0\");\n} }\nfunction MatSelect_span_5_ng_content_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngSwitchCase\", \"true\"]);\n} }\nfunction MatSelect_span_5_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 9);\n    ɵngcc0.ɵɵtemplate(1, MatSelect_span_5_span_1_Template, 2, 1, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(2, MatSelect_span_5_ng_content_2_Template, 1, 0, \"ng-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngSwitch\", !!ctx_r3.customTrigger);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n} }\nfunction MatSelect_ng_template_8_Template(rf, ctx) { if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"div\", 12)(1, \"div\", 13, 14);\n    ɵngcc0.ɵɵlistener(\"@transformPanel.done\", function MatSelect_ng_template_8_Template_div_animation_transformPanel_done_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r8._panelDoneAnimatingStream.next($event.toState)); })(\"keydown\", function MatSelect_ng_template_8_Template_div_keydown_1_listener($event) { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ɵngcc0.ɵɵresetView(ctx_r10._handleKeydown($event)); });\n    ɵngcc0.ɵɵprojection(3, 1);\n    ɵngcc0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@transformPanelWrap\", undefined);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassMapInterpolate1(\"mat-select-panel \", ctx_r4._getPanelTheme(), \"\");\n    ɵngcc0.ɵɵstyleProp(\"transform-origin\", ctx_r4._transformOrigin)(\"font-size\", ctx_r4._triggerFontSize, \"px\");\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r4.panelClass)(\"@transformPanel\", ctx_r4.multiple ? \"showing-multiple\" : \"showing\");\n} }\nconst _c2 = [[[\"mat-select-trigger\"]], \"*\"];\nconst _c3 = [\"mat-select-trigger\", \"*\"];\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true }))\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            // 32px = 2 * 16px padding\n            transform: 'scaleY(1)'\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            // 64px = 48px padding on the left + 16px padding on the right\n            transform: 'scaleY(1)'\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 })))\n    ]),\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     * @deprecated Not used anymore. To be removed.\n     * \\@breaking-change 8.0.0\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst transformPanel = matSelectAnimations.transformPanel;\n/**\n * @deprecated\n * \\@breaking-change 8.0.0\n * \\@docs-private\n * @type {?}\n */\nconst fadeInContent = matSelectAnimations.fadeInContent;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * \\@docs-private\n * @return {?}\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n * @return {?}\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nlet nextUniqueId = 0;\n/**\n * The max height of the select's overlay panel\n * @type {?}\n */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/**\n * The panel's padding on the x-axis\n * @type {?}\n */\nconst SELECT_PANEL_PADDING_X = 16;\n/**\n * The panel's x axis padding if it is indented (e.g. there is an option group).\n * @type {?}\n */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/**\n * The height of the select items in `em` units.\n * @type {?}\n */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n * @type {?}\n */\nlet SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n * @type {?}\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/**\n * Injection token that determines the scroll handling while a select is open.\n * @type {?}\n */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Change event object that is emitted when the select value has changed.\n */\nclass MatSelectChange {\n    /**\n     * @param {?} source\n     * @param {?} value\n     */\n    constructor(source, value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/**\n * \\@docs-private\n */\nclass MatSelectBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} ngControl\n     */\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\n/** @type {?} */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = function MatSelectTrigger_Factory(t) { return new (t || MatSelectTrigger)(); };\nMatSelectTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatSelectTrigger, selectors: [[\"mat-select-trigger\"]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectTrigger, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-select-trigger'\n            }]\n    }], null, null); })();\nclass MatSelect extends _MatSelectMixinBase {\n    /**\n     * @param {?} _viewportRuler\n     * @param {?} _changeDetectorRef\n     * @param {?} _ngZone\n     * @param {?} _defaultErrorStateMatcher\n     * @param {?} elementRef\n     * @param {?} _dir\n     * @param {?} _parentForm\n     * @param {?} _parentFormGroup\n     * @param {?} _parentFormField\n     * @param {?} ngControl\n     * @param {?} tabIndex\n     * @param {?} scrollStrategyFactory\n     * @param {?=} _liveAnnouncer\n     */\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this.ngControl = ngControl;\n        this._liveAnnouncer = _liveAnnouncer;\n        /**\n         * Whether or not the overlay panel is open.\n         */\n        this._panelOpen = false;\n        /**\n         * Whether filling out the select is required in the form.\n         */\n        this._required = false;\n        /**\n         * The scroll position of the overlay panel, calculated to center the selected option.\n         */\n        this._scrollTop = 0;\n        /**\n         * Whether the component is in multiple selection mode.\n         */\n        this._multiple = false;\n        /**\n         * Comparison function to specify which option is displayed. Defaults to object equality.\n         */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /**\n         * Unique id for this input.\n         */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /**\n         * Emits whenever the component is destroyed.\n         */\n        this._destroy = new Subject();\n        /**\n         * The cached font-size of the trigger element.\n         */\n        this._triggerFontSize = 0;\n        /**\n         * `View -> model callback called when value changes`\n         */\n        this._onChange = () => { };\n        /**\n         * `View -> model callback called when select has been touched`\n         */\n        this._onTouched = () => { };\n        /**\n         * The IDs of child options to be passed to the aria-owns attribute.\n         */\n        this._optionIds = '';\n        /**\n         * The value of the select panel's transform-origin property.\n         */\n        this._transformOrigin = 'top';\n        /**\n         * Emits when the panel element is finished transforming in.\n         */\n        this._panelDoneAnimatingStream = new Subject();\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        /**\n         * This position config ensures that the top \"start\" corner of the overlay\n         * is aligned with with the top \"start\" of the origin by default (overlapping\n         * the trigger completely). If the panel cannot fit below the trigger, it\n         * will fall back to a position above the trigger.\n         */\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n        /**\n         * Whether the component is disabling centering of the active option over the trigger.\n         */\n        this._disableOptionCentering = false;\n        this._focused = false;\n        /**\n         * A name for this control that can be used by `mat-form-field`.\n         */\n        this.controlType = 'mat-select';\n        /**\n         * Aria label of the select. If not specified, the placeholder will be used as label.\n         */\n        this.ariaLabel = '';\n        /**\n         * Combined stream of all of the child options' change events.\n         */\n        this.optionSelectionChanges = defer(() => {\n            if (this.options) {\n                return merge(...this.options.map(option => option.onSelectionChange));\n            }\n            return this._ngZone.onStable\n                .asObservable()\n                .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /**\n         * Event emitted when the select panel has been toggled.\n         */\n        this.openedChange = new EventEmitter();\n        /**\n         * Event emitted when the select has been opened.\n         */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /**\n         * Event emitted when the select has been closed.\n         */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /**\n         * Event emitted when the selected value has been changed by the user.\n         */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * \\@docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /**\n     * Whether the select is focused.\n     * @return {?}\n     */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * \\@breaking-change 8.0.0\n     * @param {?} value\n     * @return {?}\n     */\n    set focused(value) {\n        this._focused = value;\n    }\n    /**\n     * Placeholder to be shown if no value has been selected.\n     * @return {?}\n     */\n    get placeholder() { return this._placeholder; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the component is required.\n     * @return {?}\n     */\n    get required() { return this._required; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Whether the user should be allowed to select multiple options.\n     * @return {?}\n     */\n    get multiple() { return this._multiple; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set multiple(value) {\n        if (this._selectionModel) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether to center the active option over the trigger.\n     * @return {?}\n     */\n    get disableOptionCentering() { return this._disableOptionCentering; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     * @return {?}\n     */\n    get compareWith() { return this._compareWith; }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    set compareWith(fn) {\n        if (typeof fn !== 'function') {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Value of the select control.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} newValue\n     * @return {?}\n     */\n    set value(newValue) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n    /**\n     * Unique id of the element.\n     * @return {?}\n     */\n    get id() { return this._id; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._scrollTop = 0;\n                this.openedChange.emit(true);\n            }\n            else {\n                this.openedChange.emit(false);\n                this.overlayDir.offsetX = 0;\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    /**\n     * @return {?}\n     */\n    ngDoCheck() {\n        if (this.ngControl) {\n            this.updateErrorState();\n        }\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /**\n     * Toggles the overlay panel open or closed.\n     * @return {?}\n     */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /**\n     * Opens the overlay panel.\n     * @return {?}\n     */\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n            return;\n        }\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n            if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                this.overlayDir.overlayRef.overlayElement) {\n                this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n            }\n        });\n    }\n    /**\n     * Closes the overlay panel and focuses the host element.\n     * @return {?}\n     */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} value New value to be written to the model.\n     * @return {?}\n     */\n    writeValue(value) {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the value changes.\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} fn Callback to be triggered when the component has been touched.\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param {?} isDisabled Sets whether the component is disabled.\n     * @return {?}\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Whether or not the overlay panel is open.\n     * @return {?}\n     */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /**\n     * The currently selected option.\n     * @return {?}\n     */\n    get selected() {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n    /**\n     * The value displayed in the trigger.\n     * @return {?}\n     */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            /** @type {?} */\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /**\n     * Whether the element is in RTL mode.\n     * @return {?}\n     */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /**\n     * Handles all keydown events on the select.\n     * @param {?} event\n     * @return {?}\n     */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /**\n     * Handles keyboard events while the select is closed.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _handleClosedKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        /** @type {?} */\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        /** @type {?} */\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            /** @type {?} */\n            const selectedOption = this.selected;\n            if (keyCode === HOME || keyCode === END) {\n                keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n                event.preventDefault();\n            }\n            else {\n                manager.onKeydown(event);\n            }\n            // Since the value has changed, we need to announce it ourselves.\n            // @breaking-change 8.0.0 remove null check for _liveAnnouncer.\n            if (this._liveAnnouncer && selectedOption !== this.selected) {\n                this._liveAnnouncer.announce(((/** @type {?} */ (this.selected))).viewValue);\n            }\n        }\n    }\n    /**\n     * Handles keyboard events when the selected is open.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _handleOpenKeydown(event) {\n        /** @type {?} */\n        const keyCode = event.keyCode;\n        /** @type {?} */\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        /** @type {?} */\n        const manager = this._keyManager;\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n            keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        }\n        else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        }\n        else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            /** @type {?} */\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            /** @type {?} */\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     * @return {?}\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     * @return {?}\n     */\n    _onAttached() {\n        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._setPseudoCheckboxPaddingSize();\n            this._changeDetectorRef.detectChanges();\n            this._calculateOverlayOffsetX();\n            this.panel.nativeElement.scrollTop = this._scrollTop;\n        });\n    }\n    /**\n     * Returns the theme to be used on the panel.\n     * @return {?}\n     */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n    /**\n     * Sets the pseudo checkbox padding size based on the width of the pseudo checkbox.\n     * @private\n     * @return {?}\n     */\n    _setPseudoCheckboxPaddingSize() {\n        if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n            /** @type {?} */\n            const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n            if (pseudoCheckbox) {\n                SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n            }\n        }\n    }\n    /**\n     * Whether the select has a value.\n     * @return {?}\n     */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _setSelectionByValue(value) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            this._selectionModel.clear();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            this._selectionModel.clear();\n            /** @type {?} */\n            const correspondingOption = this._selectValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @private\n     * @param {?} value\n     * @return {?} Option that has the corresponding value.\n     */\n    _selectValue(value) {\n        /** @type {?} */\n        const correspondingOption = this.options.find((option) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /**\n     * Sets up a key manager to listen to keyboard events on the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            // Restore focus to the trigger before closing. Ensures that the focus\n            // position won't be lost if the user got focus into the overlay.\n            this.focus();\n            this.close();\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollActiveOptionIntoView();\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /**\n     * Drops current option subscriptions and IDs and resets from scratch.\n     * @private\n     * @return {?}\n     */\n    _resetOptions() {\n        /** @type {?} */\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n        this._setOptionIds();\n    }\n    /**\n     * Invoked when an option is clicked.\n     * @private\n     * @param {?} option\n     * @param {?} isUserInput\n     * @return {?}\n     */\n    _onSelect(option, isUserInput) {\n        /** @type {?} */\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        }\n        else {\n            option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the selected values in the selected based on their order in the panel.\n     * @private\n     * @return {?}\n     */\n    _sortValues() {\n        if (this.multiple) {\n            /** @type {?} */\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Emits change event to set the model value.\n     * @private\n     * @param {?=} fallbackValue\n     * @return {?}\n     */\n    _propagateChanges(fallbackValue) {\n        /** @type {?} */\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = ((/** @type {?} */ (this.selected))).map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? ((/** @type {?} */ (this.selected))).value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Records option IDs to pass to the aria-owns property.\n     * @private\n     * @return {?}\n     */\n    _setOptionIds() {\n        this._optionIds = this.options.map(option => option.id).join(' ');\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     * @private\n     * @return {?}\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /**\n     * Scrolls the active option into view.\n     * @private\n     * @return {?}\n     */\n    _scrollActiveOptionIntoView() {\n        /** @type {?} */\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        /** @type {?} */\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(activeOptionIndex + labelCount, this._getItemHeight(), this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n    }\n    /**\n     * Focuses the select element.\n     * @return {?}\n     */\n    focus() {\n        this._elementRef.nativeElement.focus();\n    }\n    /**\n     * Gets the index of the provided option in the option list.\n     * @private\n     * @param {?} option\n     * @return {?}\n     */\n    _getOptionIndex(option) {\n        return this.options.reduce((result, current, index) => {\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n    /**\n     * Calculates the scroll position and x- and y-offsets of the overlay panel.\n     * @private\n     * @return {?}\n     */\n    _calculateOverlayPosition() {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const items = this._getItemCount();\n        /** @type {?} */\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        /** @type {?} */\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        /** @type {?} */\n        let selectedOptionOffset = this.empty ? 0 : (/** @type {?} */ (this._getOptionIndex(this._selectionModel.selected[0])));\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /** @type {?} */\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        /** @type {?} */\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        /** @type {?} */\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    /**\n     * Returns the aria-label of the select component.\n     * @return {?}\n     */\n    _getAriaLabel() {\n        // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n        // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n        return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n    }\n    /**\n     * Returns the aria-labelledby of the select component.\n     * @return {?}\n     */\n    _getAriaLabelledby() {\n        if (this.ariaLabelledby) {\n            return this.ariaLabelledby;\n        }\n        // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n        // computed label. `this.ariaLabel` is only the user-specified label.\n        if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n            this._getAriaLabel()) {\n            return null;\n        }\n        return this._parentFormField._labelId || null;\n    }\n    /**\n     * Determines the `aria-activedescendant` to be set on the host.\n     * @return {?}\n     */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     * @private\n     * @return {?}\n     */\n    _calculateOverlayOffsetX() {\n        /** @type {?} */\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        /** @type {?} */\n        const viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        const isRtl = this._isRtl();\n        /** @type {?} */\n        const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n            SELECT_PANEL_PADDING_X * 2;\n        /** @type {?} */\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else {\n            /** @type {?} */\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        /** @type {?} */\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        /** @type {?} */\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     * @private\n     * @param {?} selectedIndex\n     * @param {?} scrollBuffer\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        /** @type {?} */\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this._disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            /** @type {?} */\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            /** @type {?} */\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            /** @type {?} */\n            let partialItemHeight = itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     * @private\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const viewportSize = this._viewportRuler.getViewportSize();\n        /** @type {?} */\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        /** @type {?} */\n        const panelHeightTop = Math.abs(this._offsetY);\n        /** @type {?} */\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        /** @type {?} */\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /**\n     * Adjusts the overlay panel up to fit in the viewport.\n     * @private\n     * @param {?} panelHeightBottom\n     * @param {?} bottomSpaceAvailable\n     * @return {?}\n     */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /**\n     * Adjusts the overlay panel down to fit in the viewport.\n     * @private\n     * @param {?} panelHeightTop\n     * @param {?} topSpaceAvailable\n     * @param {?} maxScroll\n     * @return {?}\n     */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        /** @type {?} */\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /**\n     * Sets the transform origin point based on the selected option.\n     * @private\n     * @return {?}\n     */\n    _getOriginBasedOnOption() {\n        /** @type {?} */\n        const itemHeight = this._getItemHeight();\n        /** @type {?} */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /** @type {?} */\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /**\n     * Calculates the amount of items in the select. This includes options and group labels.\n     * @private\n     * @return {?}\n     */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n    /**\n     * Calculates the height of the select's options.\n     * @private\n     * @return {?}\n     */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @param {?} ids\n     * @return {?}\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * \\@docs-private\n     * @return {?}\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty;\n    }\n}\nMatSelect.ɵfac = function MatSelect_Factory(t) { return new (t || MatSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.MatFormField, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControl, 10), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SELECT_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.LiveAnnouncer)); };\nMatSelect.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSelect, selectors: [[\"mat-select\"]], contentQueries: function MatSelect_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatSelectTrigger, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOptgroup, 4);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n    } }, viewQuery: function MatSelect_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(_c1, 5);\n        ɵngcc0.ɵɵviewQuery(CdkConnectedOverlay, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.overlayDir = _t.first);\n    } }, hostAttrs: [\"role\", \"listbox\", 1, \"mat-select\"], hostVars: 19, hostBindings: function MatSelect_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function MatSelect_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); })(\"focus\", function MatSelect_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSelect_blur_HostBindingHandler() { return ctx._onBlur(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"tabindex\", ctx.tabIndex)(\"aria-label\", ctx._getAriaLabel())(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-required\", ctx.required.toString())(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-owns\", ctx.panelOpen ? ctx._optionIds : null)(\"aria-multiselectable\", ctx.multiple)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-activedescendant\", ctx._getAriaActiveDescendant());\n        ɵngcc0.ɵɵclassProp(\"mat-select-disabled\", ctx.disabled)(\"mat-select-invalid\", ctx.errorState)(\"mat-select-required\", ctx.required)(\"mat-select-empty\", ctx.empty);\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], id: \"id\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", panelClass: \"panelClass\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", sortComparator: \"sortComparator\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, exportAs: [\"matSelect\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c3, decls: 9, vars: 9, consts: [[\"cdk-overlay-origin\", \"\", \"aria-hidden\", \"true\", 1, \"mat-select-trigger\", 3, \"click\"], [\"origin\", \"cdkOverlayOrigin\", \"trigger\", \"\"], [1, \"mat-select-value\", 3, \"ngSwitch\"], [\"class\", \"mat-select-placeholder\", 4, \"ngSwitchCase\"], [\"class\", \"mat-select-value-text\", 3, \"ngSwitch\", 4, \"ngSwitchCase\"], [1, \"mat-select-arrow-wrapper\"], [1, \"mat-select-arrow\"], [\"cdk-connected-overlay\", \"\", \"cdkConnectedOverlayLockPosition\", \"\", \"cdkConnectedOverlayHasBackdrop\", \"\", \"cdkConnectedOverlayBackdropClass\", \"cdk-overlay-transparent-backdrop\", 3, \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayOffsetY\", \"backdropClick\", \"attach\", \"detach\"], [1, \"mat-select-placeholder\"], [1, \"mat-select-value-text\", 3, \"ngSwitch\"], [4, \"ngSwitchDefault\"], [4, \"ngSwitchCase\"], [1, \"mat-select-panel-wrap\"], [3, \"ngClass\", \"keydown\"], [\"panel\", \"\"]], template: function MatSelect_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatSelect_Template_div_click_0_listener() { return ctx.toggle(); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(4, MatSelect_span_4_Template, 2, 1, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(5, MatSelect_span_5_Template, 3, 2, \"span\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelement(7, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵtemplate(8, MatSelect_ng_template_8_Template, 4, 10, \"ng-template\", 7);\n        ɵngcc0.ɵɵlistener(\"backdropClick\", function MatSelect_Template_ng_template_backdropClick_8_listener() { return ctx.close(); })(\"attach\", function MatSelect_Template_ng_template_attach_8_listener() { return ctx._onAttached(); })(\"detach\", function MatSelect_Template_ng_template_detach_8_listener() { return ctx.close(); });\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.empty);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"cdkConnectedOverlayScrollStrategy\", ctx._scrollStrategy)(\"cdkConnectedOverlayOrigin\", _r0)(\"cdkConnectedOverlayOpen\", ctx.panelOpen)(\"cdkConnectedOverlayPositions\", ctx._positions)(\"cdkConnectedOverlayMinWidth\", ctx._triggerRect == null ? null : ctx._triggerRect.width)(\"cdkConnectedOverlayOffsetY\", ctx._offsetY);\n    } }, dependencies: [ɵngcc7.NgClass, ɵngcc7.NgSwitch, ɵngcc7.NgSwitchCase, ɵngcc7.NgSwitchDefault, ɵngcc8.CdkConnectedOverlay, ɵngcc8.CdkOverlayOrigin], styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"], encapsulation: 2, data: { animation: [\n            matSelectAnimations.transformPanelWrap,\n            matSelectAnimations.transformPanel\n        ] }, changeDetection: 0 });\n/** @nocollapse */\nMatSelect.ctorParameters = () => [\n    { type: ViewportRuler },\n    { type: ChangeDetectorRef },\n    { type: NgZone },\n    { type: ErrorStateMatcher },\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }] },\n    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SELECT_SCROLL_STRATEGY,] }] },\n    { type: LiveAnnouncer }\n];\nMatSelect.propDecorators = {\n    trigger: [{ type: ViewChild, args: ['trigger',] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    overlayDir: [{ type: ViewChild, args: [CdkConnectedOverlay,] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }],\n    optionGroups: [{ type: ContentChildren, args: [MatOptgroup,] }],\n    panelClass: [{ type: Input }],\n    customTrigger: [{ type: ContentChild, args: [MatSelectTrigger,] }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    multiple: [{ type: Input }],\n    disableOptionCentering: [{ type: Input }],\n    compareWith: [{ type: Input }],\n    value: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    errorStateMatcher: [{ type: Input }],\n    sortComparator: [{ type: Input }],\n    id: [{ type: Input }],\n    openedChange: [{ type: Output }],\n    _openedStream: [{ type: Output, args: ['opened',] }],\n    _closedStream: [{ type: Output, args: ['closed',] }],\n    selectionChange: [{ type: Output }],\n    valueChange: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelect, [{\n        type: Component,\n        args: [{ selector: 'mat-select', exportAs: 'matSelect', template: \"<div cdk-overlay-origin class=\\\"mat-select-trigger\\\" aria-hidden=\\\"true\\\" (click)=\\\"toggle()\\\" #origin=\\\"cdkOverlayOrigin\\\" #trigger><div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\"><span class=\\\"mat-select-placeholder\\\" *ngSwitchCase=\\\"true\\\">{{placeholder || '\\u00A0'}}</span> <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\"><span *ngSwitchDefault>{{triggerValue || '\\u00A0'}}</span><ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content></span></div><div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div></div><ng-template cdk-connected-overlay cdkConnectedOverlayLockPosition cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\" [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\" [cdkConnectedOverlayOrigin]=\\\"origin\\\" [cdkConnectedOverlayOpen]=\\\"panelOpen\\\" [cdkConnectedOverlayPositions]=\\\"_positions\\\" [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width\\\" [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\" (backdropClick)=\\\"close()\\\" (attach)=\\\"_onAttached()\\\" (detach)=\\\"close()\\\"><div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]><div #panel class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\" [ngClass]=\\\"panelClass\\\" [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\" (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\" [style.transformOrigin]=\\\"_transformOrigin\\\" [style.font-size.px]=\\\"_triggerFontSize\\\" (keydown)=\\\"_handleKeydown($event)\\\"><ng-content></ng-content></div></div></ng-template>\", inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                    'role': 'listbox',\n                    '[attr.id]': 'id',\n                    '[attr.tabindex]': 'tabIndex',\n                    '[attr.aria-label]': '_getAriaLabel()',\n                    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n                    '[attr.aria-required]': 'required.toString()',\n                    '[attr.aria-disabled]': 'disabled.toString()',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n                    '[attr.aria-multiselectable]': 'multiple',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                    '[class.mat-select-disabled]': 'disabled',\n                    '[class.mat-select-invalid]': 'errorState',\n                    '[class.mat-select-required]': 'required',\n                    '[class.mat-select-empty]': 'empty',\n                    'class': 'mat-select',\n                    '(keydown)': '_handleKeydown($event)',\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()'\n                }, animations: [\n                    matSelectAnimations.transformPanelWrap,\n                    matSelectAnimations.transformPanel\n                ], providers: [\n                    { provide: MatFormFieldControl, useExisting: MatSelect },\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect }\n                ], styles: [\".mat-select{display:inline-block;width:100%;outline:0}.mat-select-trigger{display:inline-table;cursor:pointer;position:relative;box-sizing:border-box}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:default}.mat-select-value{display:table-cell;max-width:0;width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{display:table-cell;vertical-align:middle}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform .4s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px}@media (-ms-high-contrast:active){.mat-select-panel{outline:solid 1px}}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color .4s .133s cubic-bezier(.25,.8,.25,1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}\"] }]\n    }], function () { return [{ type: ɵngcc1.ViewportRuler }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.ErrorStateMatcher }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc4.NgControl, decorators: [{\n                type: Self\n            }, {\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SELECT_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc6.LiveAnnouncer }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], openedChange: [{\n            type: Output\n        }], _openedStream: [{\n            type: Output,\n            args: ['opened']\n        }], _closedStream: [{\n            type: Output,\n            args: ['closed']\n        }], selectionChange: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], id: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disableOptionCentering: [{\n            type: Input\n        }], compareWith: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], trigger: [{\n            type: ViewChild,\n            args: ['trigger']\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], overlayDir: [{\n            type: ViewChild,\n            args: [CdkConnectedOverlay]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }], optionGroups: [{\n            type: ContentChildren,\n            args: [MatOptgroup]\n        }], panelClass: [{\n            type: Input\n        }], customTrigger: [{\n            type: ContentChild,\n            args: [MatSelectTrigger]\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], errorStateMatcher: [{\n            type: Input\n        }], sortComparator: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = function MatSelectModule_Factory(t) { return new (t || MatSelectModule)(); };\nMatSelectModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatSelectModule });\nMatSelectModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule, MatFormFieldModule, MatOptionModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n                declarations: [MatSelect, MatSelectTrigger],\n                providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectModule, { declarations: function () { return [MatSelect, MatSelectTrigger]; }, imports: function () { return [CommonModule,\n        OverlayModule,\n        MatOptionModule,\n        MatCommonModule]; }, exports: function () { return [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { MatSelectModule, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, SELECT_PANEL_MAX_HEIGHT, SELECT_PANEL_PADDING_X, SELECT_PANEL_INDENT_PADDING_X, SELECT_ITEM_HEIGHT_EM, SELECT_MULTIPLE_PANEL_PADDING_X, SELECT_PANEL_VIEWPORT_PADDING, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelectChange, MatSelectBase, _MatSelectMixinBase, MatSelectTrigger, MatSelect, matSelectAnimations, transformPanel, fadeInContent };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}