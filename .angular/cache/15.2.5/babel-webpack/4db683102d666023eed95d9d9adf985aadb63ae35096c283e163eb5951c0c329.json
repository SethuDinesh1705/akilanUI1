{"ast":null,"code":"/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, Inject, Optional, ViewContainerRef, Attribute, ContentChildren, ElementRef, Input, IterableDiffers, ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\nclass MatTreeNodeOutlet {\n  /**\n   * @param {?} viewContainer\n   * @param {?=} _node\n   */\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n}\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n  return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n};\nMatTreeNodeOutlet.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeOutlet,\n  selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]]\n});\n/** @nocollapse */\nMatTreeNodeOutlet.ctorParameters = () => [{\n  type: ViewContainerRef\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [CDK_TREE_NODE_OUTLET_NODE]\n  }, {\n    type: Optional\n  }]\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeOutlet]'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [CDK_TREE_NODE_OUTLET_NODE]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/** @type {?} */\nconst _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n * @template T\n */\nclass MatTreeNode extends _MatTreeNodeMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   * @param {?} tabIndex\n   */\n  constructor(_elementRef, _tree, tabIndex) {\n    super(_elementRef, _tree);\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    this.role = 'treeitem';\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) {\n  return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\nMatTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNode,\n  selectors: [[\"mat-tree-node\"]],\n  hostAttrs: [1, \"mat-tree-node\"],\n  hostVars: 3,\n  hostBindings: function MatTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\",\n    role: \"role\"\n  },\n  exportAs: [\"matTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNode,\n    useExisting: MatTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\nMatTreeNode.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: CdkTree\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\nMatTreeNode.propDecorators = {\n  role: [{\n    type: Input\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-tree-node',\n      exportAs: 'matTreeNode',\n      inputs: ['disabled', 'tabIndex'],\n      host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        '[attr.role]': 'role',\n        'class': 'mat-tree-node'\n      },\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.CdkTree\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    role: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * @template T\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {}\nMatTreeNodeDef.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTreeNodeDef_BaseFactory;\n  return function MatTreeNodeDef_Factory(t) {\n    return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef);\n  };\n}();\nMatTreeNodeDef.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeDef,\n  selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n  inputs: {\n    when: [\"matTreeNodeDefWhen\", \"when\"],\n    data: [\"matTreeNode\", \"data\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeDef,\n    useExisting: MatTreeNodeDef\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodeDef.propDecorators = {\n  data: [{\n    type: Input,\n    args: ['matTreeNode']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeDef]',\n      inputs: ['when: matTreeNodeDefWhen'],\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }]\n    }]\n  }], null, {\n    data: [{\n      type: Input,\n      args: ['matTreeNode']\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n * @template T\n */\nclass MatNestedTreeNode extends _MatNestedTreeNodeMixinBase {\n  /**\n   * @param {?} _elementRef\n   * @param {?} _tree\n   * @param {?} _differs\n   * @param {?} tabIndex\n   */\n  constructor(_elementRef, _tree, _differs, tabIndex) {\n    super(_elementRef, _tree, _differs);\n    this._elementRef = _elementRef;\n    this._tree = _tree;\n    this._differs = _differs;\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  /**\n   * @return {?}\n   */\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n  /**\n   * @return {?}\n   */\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) {\n  return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex'));\n};\nMatNestedTreeNode.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatNestedTreeNode,\n  selectors: [[\"mat-nested-tree-node\"]],\n  contentQueries: function MatNestedTreeNode_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵcontentQuery(dirIndex, MatTreeNodeOutlet, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-nested-tree-node\"],\n  hostVars: 2,\n  hostBindings: function MatNestedTreeNode_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    tabIndex: \"tabIndex\",\n    node: [\"matNestedTreeNode\", \"node\"]\n  },\n  exportAs: [\"matNestedTreeNode\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkNestedTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CdkTreeNode,\n    useExisting: MatNestedTreeNode\n  }, {\n    provide: CDK_TREE_NODE_OUTLET_NODE,\n    useExisting: MatNestedTreeNode\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\n/** @nocollapse */\nMatNestedTreeNode.ctorParameters = () => [{\n  type: ElementRef\n}, {\n  type: CdkTree\n}, {\n  type: IterableDiffers\n}, {\n  type: String,\n  decorators: [{\n    type: Attribute,\n    args: ['tabindex']\n  }]\n}];\nMatNestedTreeNode.propDecorators = {\n  node: [{\n    type: Input,\n    args: ['matNestedTreeNode']\n  }],\n  nodeOutlet: [{\n    type: ContentChildren,\n    args: [MatTreeNodeOutlet, {\n      // We need to use `descendants: true`, because Ivy will no longer match\n      // indirect descendants if it's left as false.\n      descendants: true\n    }]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-nested-tree-node',\n      exportAs: 'matNestedTreeNode',\n      host: {\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.role]': 'role',\n        'class': 'mat-nested-tree-node'\n      },\n      inputs: ['disabled', 'tabIndex'],\n      providers: [{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }]\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc1.CdkTree\n    }, {\n      type: ɵngcc0.IterableDiffers\n    }, {\n      type: String,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    node: [{\n      type: Input,\n      args: ['matNestedTreeNode']\n    }],\n    nodeOutlet: [{\n      type: ContentChildren,\n      args: [MatTreeNodeOutlet, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n * @template T\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {}\nMatTreeNodePadding.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTreeNodePadding_BaseFactory;\n  return function MatTreeNodePadding_Factory(t) {\n    return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding);\n  };\n}();\nMatTreeNodePadding.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodePadding,\n  selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n  inputs: {\n    level: [\"matTreeNodePadding\", \"level\"],\n    indent: [\"matTreeNodePaddingIndent\", \"indent\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodePadding,\n    useExisting: MatTreeNodePadding\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodePadding.propDecorators = {\n  level: [{\n    type: Input,\n    args: ['matTreeNodePadding']\n  }],\n  indent: [{\n    type: Input,\n    args: ['matTreeNodePaddingIndent']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }]\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: ['matTreeNodePadding']\n    }],\n    indent: [{\n      type: Input,\n      args: ['matTreeNodePaddingIndent']\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTree extends CdkTree {}\nMatTree.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTree_BaseFactory;\n  return function MatTree_Factory(t) {\n    return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree);\n  };\n}();\nMatTree.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: MatTree,\n  selectors: [[\"mat-tree\"]],\n  viewQuery: function MatTree_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"],\n  exportAs: [\"matTree\"],\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTree,\n    useExisting: MatTree\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[\"matTreeNodeOutlet\", \"\"]],\n  template: function MatTree_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementContainer(0, 0);\n    }\n  },\n  dependencies: [MatTreeNodeOutlet],\n  styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"],\n  encapsulation: 2\n});\nMatTree.propDecorators = {\n  _nodeOutlet: [{\n    type: ViewChild,\n    args: [MatTreeNodeOutlet]\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTree, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tree',\n      exportAs: 'matTree',\n      template: `<ng-container matTreeNodeOutlet></ng-container>`,\n      host: {\n        'class': 'mat-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CdkTree,\n        useExisting: MatTree\n      }],\n      styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"]\n    }]\n  }], null, {\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [MatTreeNodeOutlet]\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n * @template T\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n  constructor() {\n    super(...arguments);\n    this.recursive = false;\n  }\n}\nMatTreeNodeToggle.ɵfac = /*@__PURE__*/function () {\n  let ɵMatTreeNodeToggle_BaseFactory;\n  return function MatTreeNodeToggle_Factory(t) {\n    return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle);\n  };\n}();\nMatTreeNodeToggle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n  type: MatTreeNodeToggle,\n  selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n  inputs: {\n    recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"]\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: CdkTreeNodeToggle,\n    useExisting: MatTreeNodeToggle\n  }]), ɵngcc0.ɵɵInheritDefinitionFeature]\n});\nMatTreeNodeToggle.propDecorators = {\n  recursive: [{\n    type: Input,\n    args: ['matTreeNodeToggleRecursive']\n  }]\n};\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }]\n    }]\n  }], null, {\n    recursive: [{\n      type: Input,\n      args: ['matTreeNodeToggleRecursive']\n    }]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\nclass MatTreeModule {}\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) {\n  return new (t || MatTreeModule)();\n};\nMatTreeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: MatTreeModule\n});\nMatTreeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTreeModule, CommonModule, MatCommonModule],\n      exports: MAT_TREE_DIRECTIVES,\n      declarations: MAT_TREE_DIRECTIVES\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, {\n    declarations: function () {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    },\n    imports: function () {\n      return [CdkTreeModule, CommonModule, MatCommonModule];\n    },\n    exports: function () {\n      return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\n    }\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\nclass MatTreeFlattener {\n  /**\n   * @param {?} transformFunction\n   * @param {?} getLevel\n   * @param {?} isExpandable\n   * @param {?} getChildren\n   */\n  constructor(transformFunction, getLevel, isExpandable, getChildren) {\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n  /**\n   * @param {?} node\n   * @param {?} level\n   * @param {?} resultNodes\n   * @param {?} parentMap\n   * @return {?}\n   */\n  _flattenNode(node, level, resultNodes, parentMap) {\n    /** @type {?} */\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n    if (this.isExpandable(flatNode)) {\n      /** @type {?} */\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n  /**\n   * @param {?} children\n   * @param {?} level\n   * @param {?} resultNodes\n   * @param {?} parentMap\n   * @return {?}\n   */\n  _flattenChildren(children, level, resultNodes, parentMap) {\n    children.forEach((child, index) => {\n      /** @type {?} */\n      let childParentMap = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   * @param {?} structuredData\n   * @return {?}\n   */\n  flattenNodes(structuredData) {\n    /** @type {?} */\n    let resultNodes = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   * @param {?} nodes\n   * @param {?} treeControl\n   * @return {?}\n   */\n  expandFlattenedNodes(nodes, treeControl) {\n    /** @type {?} */\n    let results = [];\n    /** @type {?} */\n    let currentExpand = [];\n    currentExpand[0] = true;\n    nodes.forEach(node => {\n      /** @type {?} */\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\nclass MatTreeFlatDataSource extends DataSource {\n  /**\n   * @param {?} treeControl\n   * @param {?} treeFlattener\n   * @param {?=} initialData\n   */\n  constructor(treeControl, treeFlattener, initialData = []) {\n    super();\n    this.treeControl = treeControl;\n    this.treeFlattener = treeFlattener;\n    this._flattenedData = new BehaviorSubject([]);\n    this._expandedData = new BehaviorSubject([]);\n    this._data = new BehaviorSubject(initialData);\n  }\n  /**\n   * @return {?}\n   */\n  get data() {\n    return this._data.value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set data(value) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n  /**\n   * @param {?} collectionViewer\n   * @return {?}\n   */\n  connect(collectionViewer) {\n    /** @type {?} */\n    const changes = [collectionViewer.viewChange, this.treeControl.expansionModel.onChange, this._flattenedData];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n  /**\n   * @return {?}\n   */\n  disconnect() {\n    // no op\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\nclass MatTreeNestedDataSource extends DataSource {\n  constructor() {\n    super(...arguments);\n    this._data = new BehaviorSubject([]);\n  }\n  /**\n   * Data for the nested tree\n   * @return {?}\n   */\n  get data() {\n    return this._data.value;\n  }\n  /**\n   * @param {?} value\n   * @return {?}\n   */\n  set data(value) {\n    this._data.next(value);\n  }\n  /**\n   * @param {?} collectionViewer\n   * @return {?}\n   */\n  connect(collectionViewer) {\n    return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => {\n      return this.data;\n    }));\n  }\n  /**\n   * @return {?}\n   */\n  disconnect() {\n    // no op\n  }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { _MatTreeNodeMixinBase, _MatNestedTreeNodeMixinBase, MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource };","map":{"version":3,"names":["CDK_TREE_NODE_OUTLET_NODE","CdkNestedTreeNode","CdkTree","CdkTreeNode","CdkTreeNodeDef","CdkTreeNodePadding","CdkTreeNodeToggle","CdkTreeModule","Directive","Inject","Optional","ViewContainerRef","Attribute","ContentChildren","ElementRef","Input","IterableDiffers","ChangeDetectionStrategy","Component","ViewChild","ViewEncapsulation","NgModule","mixinDisabled","mixinTabIndex","MatCommonModule","CommonModule","DataSource","BehaviorSubject","merge","map","take","ɵngcc0","ɵngcc1","MatTreeNodeOutlet","constructor","viewContainer","_node","ɵfac","MatTreeNodeOutlet_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","selectors","ctorParameters","undefined","decorators","args","ngDevMode","ɵsetClassMetadata","selector","_MatTreeNodeMixinBase","_MatNestedTreeNodeMixinBase","MatTreeNode","_elementRef","_tree","tabIndex","role","Number","MatTreeNode_Factory","ɵɵinjectAttribute","hostAttrs","hostVars","hostBindings","MatTreeNode_HostBindings","rf","ctx","ɵɵattribute","isExpanded","level","inputs","disabled","exportAs","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInheritDefinitionFeature","String","propDecorators","host","providers","MatTreeNodeDef","ɵMatTreeNodeDef_BaseFactory","MatTreeNodeDef_Factory","ɵɵgetInheritedFactory","when","data","MatNestedTreeNode","_differs","ngAfterContentInit","ngOnDestroy","MatNestedTreeNode_Factory","contentQueries","MatNestedTreeNode_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","nodeOutlet","MatNestedTreeNode_HostBindings","node","descendants","MatTreeNodePadding","ɵMatTreeNodePadding_BaseFactory","MatTreeNodePadding_Factory","indent","MatTree","ɵMatTree_BaseFactory","MatTree_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","MatTree_Query","ɵɵviewQuery","_nodeOutlet","first","decls","vars","consts","template","MatTree_Template","ɵɵelementContainer","dependencies","styles","encapsulation","None","changeDetection","Default","MatTreeNodeToggle","arguments","recursive","ɵMatTreeNodeToggle_BaseFactory","MatTreeNodeToggle_Factory","MAT_TREE_DIRECTIVES","MatTreeModule","MatTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","_expandedData","_data","value","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","disconnect","MatTreeNestedDataSource"],"sources":["C:/Users/Dineshkumar_Thangave/OneDrive - EPAM/Fun tasks/angulartaskone/node_modules/@angular/material/__ivy_ngcc__/esm2015/tree.js"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CDK_TREE_NODE_OUTLET_NODE, CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef, CdkTreeNodePadding, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport { Directive, Inject, Optional, ViewContainerRef, Attribute, ContentChildren, ElementRef, Input, IterableDiffers, ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinTabIndex, MatCommonModule } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/tree';\nclass MatTreeNodeOutlet {\n    /**\n     * @param {?} viewContainer\n     * @param {?=} _node\n     */\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n}\nMatTreeNodeOutlet.ɵfac = function MatTreeNodeOutlet_Factory(t) { return new (t || MatTreeNodeOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8)); };\nMatTreeNodeOutlet.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeOutlet, selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]] });\n/** @nocollapse */\nMatTreeNodeOutlet.ctorParameters = () => [\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_TREE_NODE_OUTLET_NODE,] }, { type: Optional }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeOutlet]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_TREE_NODE_OUTLET_NODE]\n            }, {\n                type: Optional\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst _MatTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkTreeNode));\n/** @type {?} */\nconst _MatNestedTreeNodeMixinBase = mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n/**\n * Wrapper for the CdkTree node with Material design styles.\n * @template T\n */\nclass MatTreeNode extends _MatTreeNodeMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, tabIndex) {\n        super(_elementRef, _tree);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this.role = 'treeitem';\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n}\nMatTreeNode.ɵfac = function MatTreeNode_Factory(t) { return new (t || MatTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNode, selectors: [[\"mat-tree-node\"]], hostAttrs: [1, \"mat-tree-node\"], hostVars: 3, hostBindings: function MatTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-level\", ctx.role === \"treeitem\" ? ctx.level : null)(\"role\", ctx.role);\n    } }, inputs: { disabled: \"disabled\", tabIndex: \"tabIndex\", role: \"role\" }, exportAs: [\"matTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNode, useExisting: MatTreeNode }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatTreeNode.propDecorators = {\n    role: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-tree-node',\n                exportAs: 'matTreeNode',\n                inputs: ['disabled', 'tabIndex'],\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n                    '[attr.role]': 'role',\n                    'class': 'mat-tree-node'\n                },\n                providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { role: [{\n            type: Input\n        }] }); })();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * @template T\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n}\nMatTreeNodeDef.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeDef_BaseFactory; return function MatTreeNodeDef_Factory(t) { return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef); }; }();\nMatTreeNodeDef.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeDef, selectors: [[\"\", \"matTreeNodeDef\", \"\"]], inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeDef.propDecorators = {\n    data: [{ type: Input, args: ['matTreeNode',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeDef, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeDef]',\n                inputs: [\n                    'when: matTreeNodeDefWhen'\n                ],\n                providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }]\n            }]\n    }], null, { data: [{\n            type: Input,\n            args: ['matTreeNode']\n        }] }); })();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n * @template T\n */\nclass MatNestedTreeNode extends _MatNestedTreeNodeMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _tree\n     * @param {?} _differs\n     * @param {?} tabIndex\n     */\n    constructor(_elementRef, _tree, _differs, tabIndex) {\n        super(_elementRef, _tree, _differs);\n        this._elementRef = _elementRef;\n        this._tree = _tree;\n        this._differs = _differs;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n}\nMatNestedTreeNode.ɵfac = function MatNestedTreeNode_Factory(t) { return new (t || MatNestedTreeNode)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CdkTree), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatNestedTreeNode.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatNestedTreeNode, selectors: [[\"mat-nested-tree-node\"]], contentQueries: function MatNestedTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatTreeNodeOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.nodeOutlet = _t);\n    } }, hostAttrs: [1, \"mat-nested-tree-node\"], hostVars: 2, hostBindings: function MatNestedTreeNode_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"role\", ctx.role);\n    } }, inputs: { disabled: \"disabled\", tabIndex: \"tabIndex\", node: [\"matNestedTreeNode\", \"node\"] }, exportAs: [\"matNestedTreeNode\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n/** @nocollapse */\nMatNestedTreeNode.ctorParameters = () => [\n    { type: ElementRef },\n    { type: CdkTree },\n    { type: IterableDiffers },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\nMatNestedTreeNode.propDecorators = {\n    node: [{ type: Input, args: ['matNestedTreeNode',] }],\n    nodeOutlet: [{ type: ContentChildren, args: [MatTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatNestedTreeNode, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-nested-tree-node',\n                exportAs: 'matNestedTreeNode',\n                host: {\n                    '[attr.aria-expanded]': 'isExpanded',\n                    '[attr.role]': 'role',\n                    'class': 'mat-nested-tree-node'\n                },\n                inputs: ['disabled', 'tabIndex'],\n                providers: [\n                    { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                    { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode }\n                ]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.CdkTree }, { type: ɵngcc0.IterableDiffers }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, { node: [{\n            type: Input,\n            args: ['matNestedTreeNode']\n        }], nodeOutlet: [{\n            type: ContentChildren,\n            args: [MatTreeNodeOutlet, {\n                    // We need to use `descendants: true`, because Ivy will no longer match\n                    // indirect descendants if it's left as false.\n                    descendants: true\n                }]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n * @template T\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n}\nMatTreeNodePadding.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodePadding_BaseFactory; return function MatTreeNodePadding_Factory(t) { return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding); }; }();\nMatTreeNodePadding.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodePadding, selectors: [[\"\", \"matTreeNodePadding\", \"\"]], inputs: { level: [\"matTreeNodePadding\", \"level\"], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodePadding.propDecorators = {\n    level: [{ type: Input, args: ['matTreeNodePadding',] }],\n    indent: [{ type: Input, args: ['matTreeNodePaddingIndent',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodePadding, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodePadding]',\n                providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }]\n            }]\n    }], null, { level: [{\n            type: Input,\n            args: ['matTreeNodePadding']\n        }], indent: [{\n            type: Input,\n            args: ['matTreeNodePaddingIndent']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTable with Material design styles.\n * @template T\n */\nclass MatTree extends CdkTree {\n}\nMatTree.ɵfac = /*@__PURE__*/ function () { let ɵMatTree_BaseFactory; return function MatTree_Factory(t) { return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree); }; }();\nMatTree.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatTree, selectors: [[\"mat-tree\"]], viewQuery: function MatTree_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(MatTreeNodeOutlet, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n    } }, hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"], exportAs: [\"matTree\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTree, useExisting: MatTree }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"matTreeNodeOutlet\", \"\"]], template: function MatTree_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementContainer(0, 0);\n    } }, dependencies: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"], encapsulation: 2 });\nMatTree.propDecorators = {\n    _nodeOutlet: [{ type: ViewChild, args: [MatTreeNodeOutlet,] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTree, [{\n        type: Component,\n        args: [{ selector: 'mat-tree', exportAs: 'matTree', template: `<ng-container matTreeNodeOutlet></ng-container>`, host: {\n                    'class': 'mat-tree',\n                    'role': 'tree'\n                }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [{ provide: CdkTree, useExisting: MatTree }], styles: [\".mat-tree{display:block}.mat-tree-node{display:flex;align-items:center;min-height:48px;flex:1;overflow:hidden;word-wrap:break-word}.mat-nested-tree-ndoe{border-bottom-width:0}\"] }]\n    }], null, { _nodeOutlet: [{\n            type: ViewChild,\n            args: [MatTreeNodeOutlet]\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n * @template T\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    constructor() {\n        super(...arguments);\n        this.recursive = false;\n    }\n}\nMatTreeNodeToggle.ɵfac = /*@__PURE__*/ function () { let ɵMatTreeNodeToggle_BaseFactory; return function MatTreeNodeToggle_Factory(t) { return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle); }; }();\nMatTreeNodeToggle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatTreeNodeToggle, selectors: [[\"\", \"matTreeNodeToggle\", \"\"]], inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTreeNodeToggle.propDecorators = {\n    recursive: [{ type: Input, args: ['matTreeNodeToggleRecursive',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n        type: Directive,\n        args: [{\n                selector: '[matTreeNodeToggle]',\n                providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }]\n            }]\n    }], null, { recursive: [{\n            type: Input,\n            args: ['matTreeNodeToggleRecursive']\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet\n];\nclass MatTreeModule {\n}\nMatTreeModule.ɵfac = function MatTreeModule_Factory(t) { return new (t || MatTreeModule)(); };\nMatTreeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatTreeModule });\nMatTreeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [CdkTreeModule, CommonModule, MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatTreeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CdkTreeModule, CommonModule, MatCommonModule],\n                exports: MAT_TREE_DIRECTIVES,\n                declarations: MAT_TREE_DIRECTIVES\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTreeModule, { declarations: function () { return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; }, imports: function () { return [CdkTreeModule, CommonModule, MatCommonModule]; }, exports: function () { return [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet]; } }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n * @template T, F\n */\nclass MatTreeFlattener {\n    /**\n     * @param {?} transformFunction\n     * @param {?} getLevel\n     * @param {?} isExpandable\n     * @param {?} getChildren\n     */\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    /**\n     * @param {?} node\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenNode(node, level, resultNodes, parentMap) {\n        /** @type {?} */\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            /** @type {?} */\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    /**\n     * @param {?} children\n     * @param {?} level\n     * @param {?} resultNodes\n     * @param {?} parentMap\n     * @return {?}\n     */\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            /** @type {?} */\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     * @param {?} structuredData\n     * @return {?}\n     */\n    flattenNodes(structuredData) {\n        /** @type {?} */\n        let resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     * @param {?} nodes\n     * @param {?} treeControl\n     * @return {?}\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        /** @type {?} */\n        let results = [];\n        /** @type {?} */\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            /** @type {?} */\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n * @template T, F\n */\nclass MatTreeFlatDataSource extends DataSource {\n    /**\n     * @param {?} treeControl\n     * @param {?} treeFlattener\n     * @param {?=} initialData\n     */\n    constructor(treeControl, treeFlattener, initialData = []) {\n        super();\n        this.treeControl = treeControl;\n        this.treeFlattener = treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject(initialData);\n    }\n    /**\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        /** @type {?} */\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange,\n            this._flattenedData\n        ];\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n * @template T\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     * @return {?}\n     */\n    get data() { return this._data.value; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set data(value) { this._data.next(value); }\n    /**\n     * @param {?} collectionViewer\n     * @return {?}\n     */\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => {\n            return this.data;\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { _MatTreeNodeMixinBase, _MatNestedTreeNodeMixinBase, MatTreeNode, MatTreeNodeDef, MatNestedTreeNode, MatTreeNodePadding, MatTree, MatTreeModule, MatTreeNodeToggle, MatTreeNodeOutlet, MatTreeFlattener, MatTreeFlatDataSource, MatTreeNestedDataSource };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}